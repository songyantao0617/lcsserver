package com.pxccn.PxcDali2.server.database.mapper;

import com.pxccn.PxcDali2.server.database.model.LightsV2;
import com.pxccn.PxcDali2.server.database.model.LightsV2Example.Criteria;
import com.pxccn.PxcDali2.server.database.model.LightsV2Example.Criterion;
import com.pxccn.PxcDali2.server.database.model.LightsV2Example;
import java.util.List;
import java.util.Map;
import org.apache.ibatis.jdbc.SQL;

public class LightsV2SqlProvider {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table lights_V2
     *
     * @mbg.generated Wed Oct 12 09:14:04 CST 2022
     */
    public String countByExample(LightsV2Example example) {
        SQL sql = new SQL();
        sql.SELECT("count(*)").FROM("lights_V2");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table lights_V2
     *
     * @mbg.generated Wed Oct 12 09:14:04 CST 2022
     */
    public String deleteByExample(LightsV2Example example) {
        SQL sql = new SQL();
        sql.DELETE_FROM("lights_V2");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table lights_V2
     *
     * @mbg.generated Wed Oct 12 09:14:04 CST 2022
     */
    public String insertSelective(LightsV2 row) {
        SQL sql = new SQL();
        sql.INSERT_INTO("lights_V2");
        
        if (row.getLightuuid() != null) {
            sql.VALUES("lightUUID", "#{lightuuid,jdbcType=CHAR}");
        }
        
        if (row.getSyncflag() != null) {
            sql.VALUES("syncFlag", "#{syncflag,jdbcType=BIT}");
        }
        
        if (row.getName() != null) {
            sql.VALUES("name", "#{name,jdbcType=NVARCHAR}");
        }
        
        if (row.getDescription() != null) {
            sql.VALUES("description", "#{description,jdbcType=NVARCHAR}");
        }
        
        if (row.getCabinetId() != null) {
            sql.VALUES("cabinet_ID", "#{cabinetId,jdbcType=INTEGER}");
        }
        
        if (row.getBusindex() != null) {
            sql.VALUES("busIndex", "#{busindex,jdbcType=INTEGER}");
        }
        
        if (row.getBustype() != null) {
            sql.VALUES("busType", "#{bustype,jdbcType=VARCHAR}");
        }
        
        if (row.getShortaddress() != null) {
            sql.VALUES("shortAddress", "#{shortaddress,jdbcType=INTEGER}");
        }
        
        if (row.getAxisX() != null) {
            sql.VALUES("axis_x", "#{axisX,jdbcType=INTEGER}");
        }
        
        if (row.getAxisY() != null) {
            sql.VALUES("axis_y", "#{axisY,jdbcType=INTEGER}");
        }
        
        if (row.getAxisZ() != null) {
            sql.VALUES("axis_z", "#{axisZ,jdbcType=INTEGER}");
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table lights_V2
     *
     * @mbg.generated Wed Oct 12 09:14:04 CST 2022
     */
    public String selectByExample(LightsV2Example example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("lightUUID");
        } else {
            sql.SELECT("lightUUID");
        }
        sql.SELECT("syncFlag");
        sql.SELECT("name");
        sql.SELECT("description");
        sql.SELECT("cabinet_ID");
        sql.SELECT("busIndex");
        sql.SELECT("busType");
        sql.SELECT("shortAddress");
        sql.SELECT("axis_x");
        sql.SELECT("axis_y");
        sql.SELECT("axis_z");
        sql.FROM("lights_V2");
        applyWhere(sql, example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table lights_V2
     *
     * @mbg.generated Wed Oct 12 09:14:04 CST 2022
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        LightsV2 row = (LightsV2) parameter.get("row");
        LightsV2Example example = (LightsV2Example) parameter.get("example");
        
        SQL sql = new SQL();
        sql.UPDATE("lights_V2");
        
        if (row.getLightuuid() != null) {
            sql.SET("lightUUID = #{row.lightuuid,jdbcType=CHAR}");
        }
        
        if (row.getSyncflag() != null) {
            sql.SET("syncFlag = #{row.syncflag,jdbcType=BIT}");
        }
        
        if (row.getName() != null) {
            sql.SET("name = #{row.name,jdbcType=NVARCHAR}");
        }
        
        if (row.getDescription() != null) {
            sql.SET("description = #{row.description,jdbcType=NVARCHAR}");
        }
        
        if (row.getCabinetId() != null) {
            sql.SET("cabinet_ID = #{row.cabinetId,jdbcType=INTEGER}");
        }
        
        if (row.getBusindex() != null) {
            sql.SET("busIndex = #{row.busindex,jdbcType=INTEGER}");
        }
        
        if (row.getBustype() != null) {
            sql.SET("busType = #{row.bustype,jdbcType=VARCHAR}");
        }
        
        if (row.getShortaddress() != null) {
            sql.SET("shortAddress = #{row.shortaddress,jdbcType=INTEGER}");
        }
        
        if (row.getAxisX() != null) {
            sql.SET("axis_x = #{row.axisX,jdbcType=INTEGER}");
        }
        
        if (row.getAxisY() != null) {
            sql.SET("axis_y = #{row.axisY,jdbcType=INTEGER}");
        }
        
        if (row.getAxisZ() != null) {
            sql.SET("axis_z = #{row.axisZ,jdbcType=INTEGER}");
        }
        
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table lights_V2
     *
     * @mbg.generated Wed Oct 12 09:14:04 CST 2022
     */
    public String updateByExample(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("lights_V2");
        
        sql.SET("lightUUID = #{row.lightuuid,jdbcType=CHAR}");
        sql.SET("syncFlag = #{row.syncflag,jdbcType=BIT}");
        sql.SET("name = #{row.name,jdbcType=NVARCHAR}");
        sql.SET("description = #{row.description,jdbcType=NVARCHAR}");
        sql.SET("cabinet_ID = #{row.cabinetId,jdbcType=INTEGER}");
        sql.SET("busIndex = #{row.busindex,jdbcType=INTEGER}");
        sql.SET("busType = #{row.bustype,jdbcType=VARCHAR}");
        sql.SET("shortAddress = #{row.shortaddress,jdbcType=INTEGER}");
        sql.SET("axis_x = #{row.axisX,jdbcType=INTEGER}");
        sql.SET("axis_y = #{row.axisY,jdbcType=INTEGER}");
        sql.SET("axis_z = #{row.axisZ,jdbcType=INTEGER}");
        
        LightsV2Example example = (LightsV2Example) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table lights_V2
     *
     * @mbg.generated Wed Oct 12 09:14:04 CST 2022
     */
    public String updateByPrimaryKeySelective(LightsV2 row) {
        SQL sql = new SQL();
        sql.UPDATE("lights_V2");
        
        if (row.getSyncflag() != null) {
            sql.SET("syncFlag = #{syncflag,jdbcType=BIT}");
        }
        
        if (row.getName() != null) {
            sql.SET("name = #{name,jdbcType=NVARCHAR}");
        }
        
        if (row.getDescription() != null) {
            sql.SET("description = #{description,jdbcType=NVARCHAR}");
        }
        
        if (row.getCabinetId() != null) {
            sql.SET("cabinet_ID = #{cabinetId,jdbcType=INTEGER}");
        }
        
        if (row.getBusindex() != null) {
            sql.SET("busIndex = #{busindex,jdbcType=INTEGER}");
        }
        
        if (row.getBustype() != null) {
            sql.SET("busType = #{bustype,jdbcType=VARCHAR}");
        }
        
        if (row.getShortaddress() != null) {
            sql.SET("shortAddress = #{shortaddress,jdbcType=INTEGER}");
        }
        
        if (row.getAxisX() != null) {
            sql.SET("axis_x = #{axisX,jdbcType=INTEGER}");
        }
        
        if (row.getAxisY() != null) {
            sql.SET("axis_y = #{axisY,jdbcType=INTEGER}");
        }
        
        if (row.getAxisZ() != null) {
            sql.SET("axis_z = #{axisZ,jdbcType=INTEGER}");
        }
        
        sql.WHERE("lightUUID = #{lightuuid,jdbcType=CHAR}");
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table lights_V2
     *
     * @mbg.generated Wed Oct 12 09:14:04 CST 2022
     */
    protected void applyWhere(SQL sql, LightsV2Example example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }
        
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        
        if (sb.length() > 0) {
            sql.WHERE(sb.toString());
        }
    }
}